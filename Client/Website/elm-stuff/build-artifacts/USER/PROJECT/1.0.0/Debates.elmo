Elm.Debates = Elm.Debates || {};
Elm.Debates.make = function (_elm) {
   "use strict";
   _elm.Debates = _elm.Debates || {};
   if (_elm.Debates.values)
   return _elm.Debates.values;
   var _op = {},
   _N = Elm.Native,
   _U = _N.Utils.make(_elm),
   _L = _N.List.make(_elm),
   _P = _N.Ports.make(_elm),
   $moduleName = "Debates",
   $Basics = Elm.Basics.make(_elm),
   $Color = Elm.Color.make(_elm),
   $Graphics$Element = Elm.Graphics.Element.make(_elm),
   $Graphics$Input = Elm.Graphics.Input.make(_elm),
   $Http = Elm.Http.make(_elm),
   $Json$Decode = Elm.Json.Decode.make(_elm),
   $List = Elm.List.make(_elm),
   $Result = Elm.Result.make(_elm),
   $Signal = Elm.Signal.make(_elm),
   $Text = Elm.Text.make(_elm),
   $Window = Elm.Window.make(_elm);
   var decodeError = function (err) {
      return $Text.plainText(A2($Basics._op["++"],
      "Error while decoding server response: ",
      err));
   };
   var loading = $Text.plainText("Hold on a minute");
   var httpError = F2(function (code,
   err) {
      return $Text.plainText(A2($Basics._op["++"],
      "Error ",
      A2($Basics._op["++"],
      $Basics.toString(code),
      A2($Basics._op["++"],
      ": ",
      err))));
   });
   var handler = F5(function (decoder,
   renderer$,
   chan,
   dims,
   resp) {
      return function () {
         switch (resp.ctor)
         {case "Failure":
            return A2(httpError,
              resp._0,
              resp._1);
            case "Success":
            return function () {
                 var _v4 = A2($Json$Decode.decodeString,
                 decoder,
                 resp._0);
                 switch (_v4.ctor)
                 {case "Err":
                    return decodeError(_v4._0);
                    case "Ok": return A3(renderer$,
                      chan,
                      dims,
                      _v4._0);}
                 _U.badCase($moduleName,
                 "between lines 169 and 171");
              }();
            case "Waiting": return loading;}
         _U.badCase($moduleName,
         "between lines 166 and 171");
      }();
   });
   var listHandler = F2(function (dec,
   rend) {
      return function () {
         var listOf = F4(function (renderer,
         chan,
         dims,
         vs) {
            return $Graphics$Element.flow($Graphics$Element.down)(A2($List.map,
            A2(renderer,chan,dims),
            vs));
         });
         return A2(handler,
         $Json$Decode.list(dec),
         listOf(rend));
      }();
   });
   var mkUser = F2(function (n,e) {
      return {_: {}
             ,email: e
             ,name: n};
   });
   var userListRenderer = function () {
      var itemRenderer = F3(function (chan,
      dims,
      user) {
         return $Text.plainText(A2($Basics._op["++"],
         "Name: ",
         A2($Basics._op["++"],
         user.name,
         A2($Basics._op["++"],
         " Email: ",
         user.email))));
      });
      var itemDecoder = A3($Json$Decode.object2,
      mkUser,
      A2($Json$Decode._op[":="],
      "name",
      $Json$Decode.string),
      A2($Json$Decode._op[":="],
      "email",
      $Json$Decode.string));
      return A2(listHandler,
      itemDecoder,
      itemRenderer);
   }();
   var User = F2(function (a,b) {
      return {_: {}
             ,email: b
             ,name: a};
   });
   var logoUrl = "images/cougar.png";
   var textButton = F3(function (chan,
   x,
   label) {
      return function () {
         var elem = $Text.plainText(label);
         return A4($Graphics$Input.customButton,
         A2($Signal.send,chan,x),
         elem,
         elem,
         elem);
      }();
   });
   var combine = function ($) {
      return $Signal.map($List.reverse)(A2($List.foldl,
      F2(function (x,z) {
         return A2($Signal._op["~"],
         A2($Signal._op["<~"],
         F2(function (x,y) {
            return A2($List._op["::"],
            x,
            y);
         }),
         x),
         z);
      }),
      $Signal.constant(_L.fromArray([])))($));
   };
   var getRender = function (_v7) {
      return function () {
         switch (_v7.ctor)
         {case "View":
            return _v7._0.render;}
         _U.badCase($moduleName,
         "on line 54, column 29 to 35");
      }();
   };
   var getAction = function (_v10) {
      return function () {
         switch (_v10.ctor)
         {case "View":
            return _v10._0.action;}
         _U.badCase($moduleName,
         "on line 52, column 29 to 35");
      }();
   };
   var unView = function (_v13) {
      return function () {
         switch (_v13.ctor)
         {case "View": return _v13._0;}
         _U.badCase($moduleName,
         "on line 50, column 19 to 20");
      }();
   };
   var ViewRec = F2(function (a,
   b) {
      return {_: {}
             ,action: a
             ,render: b};
   });
   var View = function (a) {
      return {ctor: "View",_0: a};
   };
   var constView = function (elem) {
      return View({_: {}
                  ,action: $Http.get("")
                  ,render: $Basics.always($Basics.always($Basics.always(elem)))});
   };
   var initialView = constView($Graphics$Element.empty);
   var logoButton = F2(function (h,
   chan) {
      return function () {
         var logoImage = A3($Graphics$Element.image,
         h * 481 / 400 | 0,
         h,
         logoUrl);
         return A4($Graphics$Input.customButton,
         A2($Signal.send,
         chan,
         initialView),
         logoImage,
         logoImage,
         logoImage);
      }();
   });
   var debateList = constView($Text.asText("Debate"));
   var teamList = constView($Text.asText("Team"));
   var debaterList = function () {
      var url = "http://www.time.gov/";
      return View({_: {}
                  ,action: $Http.get(url)
                  ,render: $Basics.always($Basics.always($Text.asText))});
   }();
   var judgeList = function () {
      var url = "http://dev.zalora.com/api/users";
      return View({_: {}
                  ,action: $Http.get(url)
                  ,render: userListRenderer});
   }();
   var teacherList = function () {
      var url = "http://dev.zalora.com/api/users";
      return View({_: {}
                  ,action: $Http.get(url)
                  ,render: userListRenderer});
   }();
   var groupButtons = F2(function (h,
   chan) {
      return function () {
         var button$ = F2(function (view,
         label) {
            return function () {
               var elem = $Text.plainText(label);
               return A3($Graphics$Element.container,
               $Graphics$Element.widthOf(elem),
               h,
               $Graphics$Element.middle)(A3(textButton,
               chan,
               view,
               label));
            }();
         });
         return _L.fromArray([A2(button$,
                             debateList,
                             "Debates")
                             ,A2($Graphics$Element.spacer,
                             20,
                             h)
                             ,A2(button$,teamList,"Teams")
                             ,A2($Graphics$Element.spacer,
                             20,
                             h)
                             ,A2(button$,
                             debaterList,
                             "Debaters")
                             ,A2($Graphics$Element.spacer,
                             20,
                             h)
                             ,A2(button$,judgeList,"Judges")
                             ,A2($Graphics$Element.spacer,
                             20,
                             h)
                             ,A2(button$,
                             teacherList,
                             "Teachers")]);
      }();
   });
   var navBar = F2(function (chan,
   w) {
      return function () {
         var h = 40;
         var background = function ($) {
            return $Graphics$Element.color($Color.grey)(A3($Graphics$Element.container,
            w,
            h,
            $Graphics$Element.topLeft)($));
         };
         return background(A2($Graphics$Element.flow,
         $Graphics$Element.right,
         A2($List._op["::"],
         A2(logoButton,h,chan),
         A2($List._op["::"],
         A2($Graphics$Element.spacer,
         20,
         h),
         A2(groupButtons,h,chan)))));
      }();
   });
   var main = function () {
      var chan = $Signal.channel(initialView);
      var views = $Signal.subscribe(chan);
      var body = A2($Signal._op["~"],
      A2($Signal._op["~"],
      A2($Signal._op["~"],
      A2($Signal.map,getRender,views),
      $Signal.constant(chan)),
      $Window.dimensions),
      $Http.send(A2($Signal.map,
      getAction,
      views)));
      return A2($Signal._op["<~"],
      $Graphics$Element.flow($Graphics$Element.down),
      combine(_L.fromArray([A2($Signal._op["<~"],
                           function ($) {
                              return navBar(chan)($Basics.fst($));
                           },
                           $Window.dimensions)
                           ,body])));
   }();
   _elm.Debates.values = {_op: _op
                         ,View: View
                         ,ViewRec: ViewRec
                         ,unView: unView
                         ,getAction: getAction
                         ,getRender: getRender
                         ,constView: constView
                         ,initialView: initialView
                         ,main: main
                         ,combine: combine
                         ,navBar: navBar
                         ,groupButtons: groupButtons
                         ,textButton: textButton
                         ,logoButton: logoButton
                         ,logoUrl: logoUrl
                         ,User: User
                         ,mkUser: mkUser
                         ,userListRenderer: userListRenderer
                         ,debaterList: debaterList
                         ,judgeList: judgeList
                         ,teacherList: teacherList
                         ,listHandler: listHandler
                         ,handler: handler
                         ,httpError: httpError
                         ,loading: loading
                         ,decodeError: decodeError
                         ,debateList: debateList
                         ,teamList: teamList};
   return _elm.Debates.values;
};