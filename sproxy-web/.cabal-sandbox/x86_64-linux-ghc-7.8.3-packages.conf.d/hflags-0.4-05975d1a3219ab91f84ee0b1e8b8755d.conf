name: hflags
version: 0.4
id: hflags-0.4-05975d1a3219ab91f84ee0b1e8b8755d
license: OtherLicense
copyright:
maintainer: Gergely Risko <gergely@risko.hu>
stability: provisional
homepage: http://github.com/errge/hflags
package-url:
synopsis: Command line flag parser, very similar to Google's gflags
description: The @HFlags@ library supports easy definition of command line flags,
             reimplementing the ideas from Google's @gflags@
             (<http://code.google.com/p/gflags>).
             .
             Command line flags can be declared in any file at the toplevel,
             using 'defineFlag'.  At runtime, the actual values are assigned to
             the toplevel @flags_name@ constants.  Those can be used purely
             throughout the program.
             .
             At the beginning of the @main@ function, @$initHFlags \"program
             description\"@ has to be called to initialize the flags.  All flags
             will be initialized that are transitively reachable via imports from
             @main@.  This means, that any Haskell package can easily define
             command line flags with @HFlags@.  This feature is demonstrated by
             <http://github.com/errge/hflags/blob/master/examples/ImportExample.hs>
             and <http://github.com/errge/hflags/tree/master/examples/package>.
             .
             A simple example (more in the
             <http://github.com/errge/hflags/tree/master/examples> directory):
             .
             @
             \#!\/usr\/bin\/env runhaskell
             .
             &#x7b;-\# LANGUAGE TemplateHaskell \#-&#x7d;
             .
             import HFlags
             .
             'defineFlag' \"name\" \"Indiana Jones\" \"Who to greet.\"
             'defineFlag' \"r:repeat\" (3 + 4 :: Int) \"Number of times to repeat the message.\"
             .
             main = do s <- $initHFlags \"Simple program v0.1\"
             &#x20;         sequence_ $ replicate flags_repeat greet
             &#x20;         putStrLn $ \"Your additional arguments were: \" ++ show s
             &#x20;         putStrLn $ \"Which is the same as: \" ++ show HFlags.arguments
             &#x20; where
             &#x20;   greet = putStrLn $ \"Hello \" ++ flags_name ++ \", very nice to meet you!\"
             @
             .
             At @initHFlags@ time, the library also tries to gather flags out of
             environment variables.  @HFLAGS_verbose=True@ is equivalent to
             specify --verbose=True.  This environment feature only works with
             long options and the user has to specify a value even for Bools.
             .
             /Since version 0.2, you mustn't put the initHFlags in a parentheses with the program description.  Just/ @$initHFlags@, /it's cleaner./
             .
             See <http://github.com/errge/hflags/tree/master/changelog> for recent changes.
category: Console
author: Mihaly Barasz <klao@google.com>, Gergely Risko <gergely@risko.hu>
exposed: True
exposed-modules: HFlags
hidden-modules:
trusted: False
import-dirs: /media/Data/School/CompSci/sproxy-web/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/hflags-0.4
library-dirs: /media/Data/School/CompSci/sproxy-web/.cabal-sandbox/lib/x86_64-linux-ghc-7.8.3/hflags-0.4
hs-libraries: HShflags-0.4
extra-libraries:
extra-ghci-libraries:
include-dirs:
includes:
depends: base-4.7.0.1-e4b74d27ad8c8987c63abc42a80e7335
         containers-0.5.5.1-23e2a2b94d6e452c773209f31d8672c5
         template-haskell-2.9.0.0-3afdeeadb657091939ef0bfa600dc614
         text-1.1.1.3-19b1d34e1f78946a216fb2a95da8973b
hugs-options:
cc-options:
ld-options:
framework-dirs:
frameworks:
haddock-interfaces: /media/Data/School/CompSci/sproxy-web/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/hflags-0.4/html/hflags.haddock
haddock-html: /media/Data/School/CompSci/sproxy-web/.cabal-sandbox/share/doc/x86_64-linux-ghc-7.8.3/hflags-0.4/html
